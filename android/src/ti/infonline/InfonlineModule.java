/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.infonline;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.annotations.Kroll.module;
import org.appcelerator.kroll.annotations.Kroll.constant;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;

import android.app.Activity;
import android.widget.Toast;

import de.infonline.lib.IOLEvent;
import de.infonline.lib.IOLSessionPrivacySetting;
import de.infonline.lib.IOLSessionType;
import de.infonline.lib.IOLSession;

import org.appcelerator.titanium.TiProperties;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;

@module(name = "Infonline", id = "ti.infonline")
public class InfonlineModule extends KrollModule {

	// Standard Debugging variables
	private static final String LCAT = "IVWMod";

	private static final String CONFIG_FILE_NAME = "szm_infonline_lib_config";
	private boolean isSessionopened = false;
	private boolean isOptIn = false;
	private boolean dbg = false;

	@constant
	public static final String EVENT_VIEW = "view";
	@constant
	public static final String STATE_VIEW_APPEARED = "appeared";
	@constant
	public static final String STATE_VIEW_DISAPPEARED = "disappeared";
	@constant
	public static final String STATE_VIEW_REFRESHED = "refreshed";

	@constant
	public static final String EVENT_ADVERTISEMENT = "advertisement";
	@constant
	public static final String STATE_ADVERTISEMENT_OPEN = "open";
	@constant
	public static final String STATE_ADVERTISEMENT_CLOSE = "close";

	@constant
	public static final String EVENT_LOGIN = "login";
	@constant
	public static final String STATE_LOGIN_SUCCEEDED = "succeeded";
	@constant
	public static final String STATE_LOGIN_FAILED = "failed";
	@constant
	public static final String STATE_LOGIN_LOGOUT = "logout";

	@constant
	public static final String EVENT_IAP = "iap";
	@constant
	public static final String STATE_IAP_STARTED = "started";
	@constant
	public static final String STATE_IAP_FINISHED = "finished";
	@constant
	public static final String STATE_IAP_CANCELLED = "cancelled";

	@constant
	public static final String EVENT_DATA = "data";
	@constant
	public static final String STATE_DATA_CANCELLED = "cancelled";
	@constant
	public static final String STATE_DATA_REFRESH = "refresh";
	@constant
	public static final String STATE_DATA_SUCCEEDED = "succeeded";
	@constant
	public static final String STATE_DATA_FAILED = "failed";

	@constant
	public static final String EVENT_DOCUMENT = "document";
	@constant
	public static final String STATE_DOCUMENT_OPEN = "open";
	@constant
	public static final String STATE_DOCUMENT_EDIT = "edit";
	@constant
	public static final String STATE_DOCUMENT_CLOSE = "close";

	@constant
	public static final String EVENT_DOWNLOAD = "download";
	@constant
	public static final String STATE_DOWNLOAD_CANCELLED = "cancelled";
	@constant
	public static final String STATE_DOWNLOAD_START = "start";
	@constant
	public static final String STATE_DOWNLOAD_FAILED = "failed";
	@constant
	public static final String STATE_DOWNLOAD_SUCCEDED = "succeeded";

	@constant
	public static final String EVENT_GAME = "game";
	@constant
	public static final String STATE_GAME_ACTION = "action";
	@constant
	public static final String STATE_GAME_STARTED = "started";
	@constant
	public static final String STATE_GAME_FINISHED = "finished";
	@constant
	public static final String STATE_GAME_WON = "won";
	@constant
	public static final String STATE_GAME_LOST = "lost";
	@constant
	public static final String STATE_GAME_NEWHIGHSCORE = "newhighscore";
	@constant
	public static final String STATE_GAME_NewAchievement = "newachievement";

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
		String KEY = "IVW_OFFER_ID_ANDROID";
		TiProperties props = TiApplication.getInstance().getAppProperties();

		if (props.hasProperty(KEY)) {
			String offerId= props.getString(KEY, "");
			IOLSession.getSessionForType(IOLSessionType.SZM).initIOLSession(offerId, false, IOLSessionPrivacySetting.LIN); // TODO: Is LIN ok here?
			Log.d(LCAT,
					"****************************************************************\n"
					+ "IOLSession started with: " + offerId +
					"\n****************************************************************");
		} else {
			Toast.makeText(app.getApplicationContext(), "The mandatory offerId is missing.\nPlease read log",
		    Toast.LENGTH_LONG).show();
			Log.e(LCAT,
					"***************************************************************************\n"
					+ "You need to add a property with name 'IVW_OFFER_ID_ANDROID' to tiapp.xml"+
					"  <property name=\"" + KEY + "\" type=\"string\">###YOUR_KEY###</property>" +		
					"\n***************************************************************************");
		}	
	}

	@Kroll.method
	public void optIn() {
		isOptIn = true;
	}

	@Kroll.method
	public void optOut() {
		isOptIn = false;
		IOLSession.getSessionForType(IOLSessionType.SZM).terminateSession();
	}

	@Kroll.method
	public void sendLoggedEvents() {
		IOLSession.getSessionForType(IOLSessionType.SZM).sendLoggedEvents();
	}

	@Kroll.method
	public void logEvent(Object _event, Object _state, Object _code,
			Object _comment) {
		String event = "";
		String state = "";
		String code = "";
		String comment = "";
		if (!isOptIn)
			return;
		if (_event instanceof String) {
			event = (String) _event;
		} else
			Log.e(LCAT, "wrong type for event");
		if (_state instanceof String) {
			state = (String) _state;
		} else
			Log.e(LCAT, "wrong type for state");
		if (_code instanceof String) {
			code = (String) _code;
		} else
			Log.e(LCAT, "wrong type for code");
		if (_comment instanceof String) {
			comment = (String) _comment;
		} else
			Log.e(LCAT, "wrong type for comment");
		if (_event instanceof String) {
			event = (String) _event;
		} else
			Log.e(LCAT, "wrong type for event");

		// Converting String event into internal type:
		IOLEvent type = InfonlineModule.getEventTypeFromString(event, state);

		if (!isSessionopened) {
			IOLSession.getSessionForType(IOLSessionType.SZM).startSession();
		}

		IOLSession.getSessionForType(IOLSessionType.SZM).logEvent(type);
		// IOLSession.getSessionForType(IOLSessionType.SZM).logEvent(type, code, comment);
	}

	// Methods
	@Kroll.method
	public void startSession() {
		IOLSession.getSessionForType(IOLSessionType.SZM).startSession();
		isSessionopened = true;
	}

	// Methods
	@Kroll.method
	public void stopSession() {
		IOLSession.getSessionForType(IOLSessionType.SZM).terminateSession();
		isSessionopened = false;
	}

	@Kroll.method
	public void setDbg(Boolean dbg) {
		this.dbg = dbg;
		IOLSession.setDebugModeEnabled(dbg);
	}

	@Kroll.method
	public void enableDebug() {
		this.dbg = true;
		IOLSession.setDebugModeEnabled(true);
	}

	@Kroll.method
	public void disableDebug() {
		this.dbg = false;
		IOLSession.setDebugModeEnabled(false);
	}

	@Kroll.method
	public String getVersion() {
		Log.d(LCAT, "Version of Ti.InfOnline: " + IOLSession.getVersion());
		return IOLSession.getVersion();
	}

	@Kroll.method
	public void setDeviceIdEnabled(Boolean enabled) {
		IOLSession.setDeviceIDsEnabled(enabled);
	}

	@Kroll.setProperty
	public void setCostumerData(String data) {
		// IOLSession.setCustomerData(data);
	}

	@Kroll.method
	public void onStart() {
		// IOLSession.onActivityStart();
	}

	@Kroll.method
	public void onStop() {
		// IOLSession.onActivityStop();
	}

	public void onStart(Activity activity) {
		super.onStart(activity);
		// IOLSession.onActivityStart();
	}

	public void onStop(Activity activity) {
		// IOLSession.onActivityStop();
		super.onStop(activity);
	}

	private static HashMap<String, String[]> getConfigFile() throws IOException, ParseException, JSONException {
		Activity currentActivity = TiApplication.getAppCurrentActivity();
		int fileIdentifier = currentActivity.getResources().getIdentifier(CONFIG_FILE_NAME, "raw", currentActivity.getPackageName());
		InputStream inputStream = currentActivity.getResources().openRawResource(fileIdentifier);

		JSONObject file = (JSONObject) new JSONParser().parse(new InputStreamReader(inputStream, "UTF-8"));
		JSONObject configuration = file.getJSONObject("configuration");
		JSONObject activeEvents = configuration.getJSONObject("activeEvents");

		Iterator<String> keys = activeEvents.keys();
		HashMap<String, String[]> activeEventsMap = new HashMap<>();

		// Map JSON array to String array
		while(keys.hasNext()) {
			String key = keys.next();
			if (activeEvents.get(key) instanceof JSONArray) {
				JSONArray states = (JSONArray) activeEvents.get(key);
				activeEventsMap.put(key, InfonlineModule.toStringArray(states));
			}
		}

		return activeEventsMap;
	}

	// CREDITS: https://stackoverflow.com/a/33421601/5537752
	public static String[] toStringArray(JSONArray array) {
		if (array==null)
			return null;

		String[] arr=new String[array.length()];
		for (int i = 0; i < arr.length; i++) {
			arr[i] = array.optString(i);
		}

		return arr;
	}

	static IOLEvent getEventTypeFromString(String eventName, String stateName) {
		HashMap<String, String[]> configFile;

		try {
			configFile = InfonlineModule.getConfigFile();
		} catch (JSONException jsonException) {
			Log.e(LCAT, jsonException.getLocalizedMessage());
			return null;
		} catch (IOException ioException) {
			Log.e(LCAT, ioException.getLocalizedMessage());
			return null;
		} catch (ParseException parseException) {
			Log.e(LCAT, parseException.getLocalizedMessage());
			return null;
		}

		if (configFile.containsKey(eventName) && Arrays.asList(configFile.get(eventName)).contains(stateName)) {
			return new IOLEvent() {
				@Override
				public String getIdentifier() {
					return eventName;
				}
				@Override
				public String getState() {
					return stateName;
				}
			};
		}

		return null;
	}
}
